{"ast":null,"code":"import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios'; // Function sends challenge creation data to server via post runs FETCH_CHALLENGES to refetch\n\nfunction* createChallengesSage(action) {\n  yield axios({\n    method: 'POST',\n    url: '/api/challenges',\n    data: action.payload\n  });\n  yield put({\n    type: 'FETCH_CHALLENGES'\n  });\n}\n\n; // Function fetches all challenges ordered by date asc then puts data in reducer listening for SET_CHALLENGES\n\nfunction* fetchChallengesSaga() {\n  let response = yield axios.get(`/api/challenges`);\n  yield put({\n    type: 'SET_CHALLENGES',\n    payload: response.data\n  });\n}\n\n; // Function fetches daily challenge based on date sets data into reducer listening for SET_DAILY_CHALLENGE\n\nfunction* fetchDailyChallengeSaga(action) {\n  let response = yield axios({\n    method: 'POST',\n    url: `/api/dailychallenge`,\n    data: action.payload\n  });\n  yield put({\n    type: 'SET_DAILY_CHALLENGE',\n    payload: response.data\n  });\n}\n\n; // Function sends data to update for challenge refetches with FETCH_CHALLENGES\n\nfunction* updateChallengeSaga(action) {\n  let challengeId = action.payload.id;\n  let challengeTitle = action.payload.title;\n  let challengedDescription = action.payload.description;\n  let challengeDate = action.payload.date;\n  yield axios({\n    method: 'PUT',\n    url: '/api/challenges',\n    data: {\n      id: challengeId,\n      name: challengeTitle,\n      description: challengedDescription,\n      date: challengeDate\n    }\n  });\n  yield put({\n    type: 'FETCH_CHALLENGES'\n  });\n}\n\n;\n\nfunction* challengesSaga() {\n  yield takeLatest('CREATE_CHALLENGES', createChallengesSage);\n  yield takeLatest('FETCH_CHALLENGES', fetchChallengesSaga);\n  yield takeLatest('FETCH_DAILY_CHALLENGE', fetchDailyChallengeSaga);\n  yield takeLatest('UPDATE_CHALLENGE', updateChallengeSaga);\n}\n\n;\nexport default challengesSaga;","map":{"version":3,"sources":["/Users/rthrcrsn/Documents/Projects/struggling-shelter/src/redux/sagas/challenges.saga.js"],"names":["put","takeLatest","axios","createChallengesSage","action","method","url","data","payload","type","fetchChallengesSaga","response","get","fetchDailyChallengeSaga","updateChallengeSaga","challengeId","id","challengeTitle","title","challengedDescription","description","challengeDate","date","name","challengesSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,UAAUC,oBAAV,CAA+BC,MAA/B,EAAuC;AACrC,QAAMF,KAAK,CAAC;AACRG,IAAAA,MAAM,EAAE,MADA;AAERC,IAAAA,GAAG,EAAE,iBAFG;AAGRC,IAAAA,IAAI,EAAEH,MAAM,CAACI;AAHL,GAAD,CAAX;AAKA,QAAMR,GAAG,CAAC;AAACS,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAT;AACD;;AAAA,C,CAED;;AACA,UAAUC,mBAAV,GAA+B;AAC7B,MAAIC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,iBAAX,CAArB;AACA,QAAMZ,GAAG,CAAC;AACRS,IAAAA,IAAI,EAAE,gBADE;AAERD,IAAAA,OAAO,EAAEG,QAAQ,CAACJ;AAFV,GAAD,CAAT;AAID;;AAAA,C,CAED;;AACA,UAAUM,uBAAV,CAAkCT,MAAlC,EAAyC;AACvC,MAAIO,QAAQ,GAAG,MAAMT,KAAK,CAAC;AACzBG,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,GAAG,EAAG,qBAFmB;AAGzBC,IAAAA,IAAI,EAAEH,MAAM,CAACI;AAHY,GAAD,CAA1B;AAKA,QAAMR,GAAG,CAAC;AACRS,IAAAA,IAAI,EAAE,qBADE;AAERD,IAAAA,OAAO,EAAEG,QAAQ,CAACJ;AAFV,GAAD,CAAT;AAID;;AAAA,C,CAED;;AACA,UAAUO,mBAAV,CAA8BV,MAA9B,EAAsC;AACpC,MAAIW,WAAW,GAAGX,MAAM,CAACI,OAAP,CAAeQ,EAAjC;AACA,MAAIC,cAAc,GAAGb,MAAM,CAACI,OAAP,CAAeU,KAApC;AACA,MAAIC,qBAAqB,GAAGf,MAAM,CAACI,OAAP,CAAeY,WAA3C;AACA,MAAIC,aAAa,GAAGjB,MAAM,CAACI,OAAP,CAAec,IAAnC;AACA,QAAMpB,KAAK,CAAC;AACVG,IAAAA,MAAM,EAAE,KADE;AAEVC,IAAAA,GAAG,EAAE,iBAFK;AAGVC,IAAAA,IAAI,EAAE;AACJS,MAAAA,EAAE,EAAED,WADA;AAEJQ,MAAAA,IAAI,EAAEN,cAFF;AAGJG,MAAAA,WAAW,EAAED,qBAHT;AAIJG,MAAAA,IAAI,EAAED;AAJF;AAHI,GAAD,CAAX;AAUA,QAAMrB,GAAG,CAAC;AAACS,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAT;AACD;;AAAA;;AAED,UAAUe,cAAV,GAA2B;AACzB,QAAMvB,UAAU,CAAC,mBAAD,EAAsBE,oBAAtB,CAAhB;AACA,QAAMF,UAAU,CAAC,kBAAD,EAAqBS,mBAArB,CAAhB;AACA,QAAMT,UAAU,CAAC,uBAAD,EAA0BY,uBAA1B,CAAhB;AACA,QAAMZ,UAAU,CAAC,kBAAD,EAAqBa,mBAArB,CAAhB;AACD;;AAAA;AAED,eAAeU,cAAf","sourcesContent":["import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// Function sends challenge creation data to server via post runs FETCH_CHALLENGES to refetch\nfunction* createChallengesSage(action) {\n  yield axios({\n      method: 'POST',\n      url: '/api/challenges',\n      data: action.payload\n  });\n  yield put({type: 'FETCH_CHALLENGES'});\n};\n\n// Function fetches all challenges ordered by date asc then puts data in reducer listening for SET_CHALLENGES\nfunction* fetchChallengesSaga(){\n  let response = yield axios.get(`/api/challenges`);\n  yield put({\n    type: 'SET_CHALLENGES',\n    payload: response.data\n  });\n};\n\n// Function fetches daily challenge based on date sets data into reducer listening for SET_DAILY_CHALLENGE\nfunction* fetchDailyChallengeSaga(action){\n  let response = yield axios({\n    method: 'POST',\n    url: `/api/dailychallenge`,\n    data: action.payload\n  });\n  yield put({\n    type: 'SET_DAILY_CHALLENGE',\n    payload: response.data\n  });\n};\n\n// Function sends data to update for challenge refetches with FETCH_CHALLENGES\nfunction* updateChallengeSaga(action) {\n  let challengeId = action.payload.id;\n  let challengeTitle = action.payload.title;\n  let challengedDescription = action.payload.description;\n  let challengeDate = action.payload.date;\n  yield axios({\n    method: 'PUT',\n    url: '/api/challenges',\n    data: {\n      id: challengeId,\n      name: challengeTitle,\n      description: challengedDescription,\n      date: challengeDate\n    }\n  });\n  yield put({type: 'FETCH_CHALLENGES'});\n};\n\nfunction* challengesSaga() {\n  yield takeLatest('CREATE_CHALLENGES', createChallengesSage);\n  yield takeLatest('FETCH_CHALLENGES', fetchChallengesSaga);\n  yield takeLatest('FETCH_DAILY_CHALLENGE', fetchDailyChallengeSaga);\n  yield takeLatest('UPDATE_CHALLENGE', updateChallengeSaga);\n};\n\nexport default challengesSaga;"]},"metadata":{},"sourceType":"module"}