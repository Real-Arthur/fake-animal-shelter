{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rthrcrsn/Documents/Projects/struggling-shelter/src/components/AdminRoute/AdminRoute.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport ContestHome from '../User/ContestHome/ContestHome';\nimport LoginPage from '../LoginPage/LoginPage';\nimport mapStoreToProps from '../../redux/mapStoreToProps'; // A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst AdminRoute = props => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    // redirect path to be used if the user is authorized\n    adminRedirect,\n    store,\n    ...otherProps\n  } = props;\n  let ComponentToShow;\n\n  if (store.user.admin === 'ADMIN') {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else {\n    if (store.user.id) {\n      ComponentToShow = ContestHome;\n    } else {\n      ComponentToShow = LoginPage;\n    }\n  } // redirect a logged in user if an authRedirect prop has been provided\n\n\n  if (store.user.id && adminRedirect != null) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      exact: true,\n      from: otherProps.path,\n      to: adminRedirect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  } else if (!store.user.id && adminRedirect != null) {\n    ComponentToShow = ComponentToProtect;\n  } // We return a Route component that gets added to our list of routes\n\n\n  return /*#__PURE__*/_jsxDEV(Route // all props like 'exact' and 'path' that were passed in\n  // are now passed along to the 'Route' Component\n  , { ...otherProps,\n    component: ComponentToShow\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_c = AdminRoute;\nexport default connect(mapStoreToProps)(AdminRoute);\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"sources":["/Users/rthrcrsn/Documents/Projects/struggling-shelter/src/components/AdminRoute/AdminRoute.js"],"names":["React","Route","Redirect","connect","ContestHome","LoginPage","mapStoreToProps","AdminRoute","props","component","ComponentToProtect","adminRedirect","store","otherProps","ComponentToShow","user","admin","id","path"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,eAAP,MAA4B,6BAA5B,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B;AACA;AACA,QAAM;AACJ;AACAC,IAAAA,SAAS,EAAEC,kBAFP;AAGJ;AACAC,IAAAA,aAJI;AAKJC,IAAAA,KALI;AAMJ,OAAGC;AANC,MAOFL,KAPJ;AASA,MAAIM,eAAJ;;AAEA,MAAIF,KAAK,CAACG,IAAN,CAAWC,KAAX,KAAqB,OAAzB,EAAkC;AAChC;AACA;AACAF,IAAAA,eAAe,GAAGJ,kBAAlB;AACD,GAJD,MAIO;AAEL,QAAGE,KAAK,CAACG,IAAN,CAAWE,EAAd,EAAkB;AAChBH,MAAAA,eAAe,GAAGV,WAAlB;AACD,KAFD,MAEO;AACLU,MAAAA,eAAe,GAAGT,SAAlB;AACD;AAEF,GA1B2B,CA4B5B;;;AACA,MAAIO,KAAK,CAACG,IAAN,CAAWE,EAAX,IAAiBN,aAAa,IAAI,IAAtC,EAA4C;AAC1C,wBAAO,QAAC,QAAD;AAAU,MAAA,KAAK,MAAf;AAAgB,MAAA,IAAI,EAAEE,UAAU,CAACK,IAAjC;AAAuC,MAAA,EAAE,EAAEP;AAA3C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACC,KAAK,CAACG,IAAN,CAAWE,EAAZ,IAAkBN,aAAa,IAAI,IAAvC,EAA6C;AAClDG,IAAAA,eAAe,GAAGJ,kBAAlB;AACD,GAjC2B,CAmC5B;;;AACA,sBACE,QAAC,KAAD,CACE;AACA;AAFF,SAGMG,UAHN;AAIE,IAAA,SAAS,EAAEC;AAJb;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA5CD;;KAAMP,U;AA8CN,eAAeJ,OAAO,CAACG,eAAD,CAAP,CAAyBC,UAAzB,CAAf","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport ContestHome from '../User/ContestHome/ContestHome';\nimport LoginPage from '../LoginPage/LoginPage';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst AdminRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    // redirect path to be used if the user is authorized\n    adminRedirect,\n    store,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if (store.user.admin === 'ADMIN') {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else {\n    \n    if(store.user.id) {\n      ComponentToShow = ContestHome;\n    } else {\n      ComponentToShow = LoginPage;\n    }\n   \n  }\n\n  // redirect a logged in user if an authRedirect prop has been provided\n  if (store.user.id && adminRedirect != null) {\n    return <Redirect exact from={otherProps.path} to={adminRedirect} />;\n  } else if (!store.user.id && adminRedirect != null) {\n    ComponentToShow = ComponentToProtect;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n    <Route\n      // all props like 'exact' and 'path' that were passed in\n      // are now passed along to the 'Route' Component\n      {...otherProps}\n      component={ComponentToShow}\n    />\n  );\n};\n\nexport default connect(mapStoreToProps)(AdminRoute);"]},"metadata":{},"sourceType":"module"}