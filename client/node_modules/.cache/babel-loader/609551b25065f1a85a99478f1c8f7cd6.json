{"ast":null,"code":"import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios'; // worker Saga: will be fired on \"REGISTER\" actions\n\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({\n      type: 'CLEAR_REGISTRATION_ERROR'\n    }); // passes the username and password from the payload to the server\n\n    yield axios.post('/api/user/register', action.payload); // automatically log a user in after registration\n\n    yield put({\n      type: 'LOGIN',\n      payload: action.payload\n    }); // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n\n    yield put({\n      type: 'SET_TO_LOGIN_MODE'\n    });\n  } catch (error) {\n    console.log('Error with user registration:', error);\n    yield put({\n      type: 'REGISTRATION_FAILED'\n    });\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;","map":{"version":3,"sources":["/Users/rthrcrsn/Documents/Projects/struggling-shelter/src/redux/sagas/registration.saga.js"],"names":["put","takeLatest","axios","registerUser","action","type","post","payload","error","console","log","registrationSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,UAAUC,YAAV,CAAuBC,MAAvB,EAA+B;AAC7B,MAAI;AACF;AACA,UAAMJ,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAT,CAFE,CAIF;;AACA,UAAMH,KAAK,CAACI,IAAN,CAAW,oBAAX,EAAiCF,MAAM,CAACG,OAAxC,CAAN,CALE,CAOF;;AACA,UAAMP,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAE,OAAR;AAAiBE,MAAAA,OAAO,EAAEH,MAAM,CAACG;AAAjC,KAAD,CAAT,CARE,CAUF;AACA;;AACA,UAAMP,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAT;AACD,GAbD,CAaE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,KAA7C;AACA,UAAMR,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAT;AACD;AACF;;AAED,UAAUM,gBAAV,GAA6B;AAC3B,QAAMV,UAAU,CAAC,UAAD,EAAaE,YAAb,CAAhB;AACD;;AAED,eAAeQ,gBAAf","sourcesContent":["import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('/api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n\n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({ type: 'SET_TO_LOGIN_MODE' });\n  } catch (error) {\n    console.log('Error with user registration:', error);\n    yield put({ type: 'REGISTRATION_FAILED' });\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;"]},"metadata":{},"sourceType":"module"}