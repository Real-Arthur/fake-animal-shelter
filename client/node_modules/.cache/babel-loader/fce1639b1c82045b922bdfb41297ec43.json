{"ast":null,"code":"import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport swal from 'sweetalert'; // Function runs a put request with action.payload.photo_id upon success throws back into fetch_captain_team_photos with action.payload.team_id\n\nfunction* approvePhotosSaga(action) {\n  yield axios({\n    method: 'PUT',\n    url: `/api/photos/${action.payload.photo_id}`\n  });\n  yield put({\n    type: 'FETCH_CAPTAIN_TEAM_PHOTOS',\n    payload: action.payload.team_id\n  });\n}\n\n; // Function sends photo creation data\n\nfunction* createPhotosSaga(action) {\n  try {\n    yield axios({\n      method: 'POST',\n      url: '/api/photos',\n      data: action.payload\n    });\n  } catch (error) {\n    if (error.response.status === 400) {\n      swal({\n        title: `You've already submitted a photo for the daily challenge today!`,\n        text: `Please try again tomorrow!`,\n        buttons: {\n          cancel: \"Ok\"\n        }\n      });\n    }\n  }\n}\n\n; // Function runs a delete request with action.payload.photo_id upon success throws back into fetch_captain_team_photos with action.payload.team_id\n\nfunction* denyPhotosSaga(action) {\n  yield axios({\n    method: 'DELETE',\n    url: `/api/photos/${action.payload.photo_id}`\n  });\n  yield put({\n    type: 'FETCH_CAPTAIN_TEAM_PHOTOS',\n    payload: action.payload.team_id\n  });\n}\n\n; // Function sends get request to get all challenge photos and puts in reducer listening for 'SET_CHALLENGE_PHOTOS'\n\nfunction* fetchChallengePhotosSaga() {\n  let response = yield axios({\n    method: 'GET',\n    url: `/api/challengephotos`\n  });\n  yield put({\n    type: 'SET_CHALLENGE_PHOTOS',\n    payload: response.data\n  });\n}\n\n;\n\nfunction* photosSaga() {\n  yield takeLatest('APPROVE_PHOTOS', approvePhotosSaga);\n  yield takeLatest('CREATE_PHOTOS', createPhotosSaga);\n  yield takeLatest('DELETE_PHOTOS', denyPhotosSaga);\n  yield takeLatest('FETCH_CHALLENGE_PHOTOS', fetchChallengePhotosSaga);\n}\n\n;\nexport default photosSaga;","map":{"version":3,"sources":["/Users/rthrcrsn/Documents/Projects/struggling-shelter/src/redux/sagas/photos.saga.js"],"names":["put","takeLatest","axios","swal","approvePhotosSaga","action","method","url","payload","photo_id","type","team_id","createPhotosSaga","data","error","response","status","title","text","buttons","cancel","denyPhotosSaga","fetchChallengePhotosSaga","photosSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB,C,CAEA;;AACA,UAAUC,iBAAV,CAA4BC,MAA5B,EAAmC;AACjC,QAAMH,KAAK,CAAC;AACVI,IAAAA,MAAM,EAAE,KADE;AAEVC,IAAAA,GAAG,EAAG,eAAcF,MAAM,CAACG,OAAP,CAAeC,QAAS;AAFlC,GAAD,CAAX;AAIA,QAAMT,GAAG,CAAC;AACRU,IAAAA,IAAI,EAAE,2BADE;AAERF,IAAAA,OAAO,EAAEH,MAAM,CAACG,OAAP,CAAeG;AAFhB,GAAD,CAAT;AAID;;AAAA,C,CAED;;AACA,UAAUC,gBAAV,CAA2BP,MAA3B,EAAmC;AACjC,MAAG;AACD,UAAMH,KAAK,CAAC;AACVI,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,GAAG,EAAE,aAFK;AAGVM,MAAAA,IAAI,EAAER,MAAM,CAACG;AAHH,KAAD,CAAX;AAKD,GAND,CAOA,OAAOM,KAAP,EAAc;AACZ,QAAIA,KAAK,CAACC,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EAAmC;AACjCb,MAAAA,IAAI,CAAC;AACHc,QAAAA,KAAK,EAAG,iEADL;AAEHC,QAAAA,IAAI,EAAG,4BAFJ;AAGHC,QAAAA,OAAO,EAAE;AACTC,UAAAA,MAAM,EAAE;AADC;AAHN,OAAD,CAAJ;AAOD;AACF;AACF;;AAAA,C,CAED;;AACA,UAAUC,cAAV,CAAyBhB,MAAzB,EAAgC;AAC9B,QAAMH,KAAK,CAAC;AACVI,IAAAA,MAAM,EAAE,QADE;AAEVC,IAAAA,GAAG,EAAG,eAAcF,MAAM,CAACG,OAAP,CAAeC,QAAS;AAFlC,GAAD,CAAX;AAIA,QAAMT,GAAG,CAAC;AACRU,IAAAA,IAAI,EAAE,2BADE;AAERF,IAAAA,OAAO,EAAEH,MAAM,CAACG,OAAP,CAAeG;AAFhB,GAAD,CAAT;AAID;;AAAA,C,CAED;;AACA,UAAUW,wBAAV,GAAoC;AAClC,MAAIP,QAAQ,GAAG,MAAMb,KAAK,CAAC;AACzBI,IAAAA,MAAM,EAAE,KADiB;AAEzBC,IAAAA,GAAG,EAAG;AAFmB,GAAD,CAA1B;AAIA,QAAMP,GAAG,CAAC;AACRU,IAAAA,IAAI,EAAE,sBADE;AAERF,IAAAA,OAAO,EAAEO,QAAQ,CAACF;AAFV,GAAD,CAAT;AAID;;AAAA;;AAED,UAAUU,UAAV,GAAuB;AACrB,QAAMtB,UAAU,CAAC,gBAAD,EAAmBG,iBAAnB,CAAhB;AACA,QAAMH,UAAU,CAAC,eAAD,EAAkBW,gBAAlB,CAAhB;AACA,QAAMX,UAAU,CAAC,eAAD,EAAkBoB,cAAlB,CAAhB;AACA,QAAMpB,UAAU,CAAC,wBAAD,EAA2BqB,wBAA3B,CAAhB;AACD;;AAAA;AAED,eAAeC,UAAf","sourcesContent":["import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport swal from 'sweetalert';\n\n// Function runs a put request with action.payload.photo_id upon success throws back into fetch_captain_team_photos with action.payload.team_id\nfunction* approvePhotosSaga(action){\n  yield axios({\n    method: 'PUT',\n    url: `/api/photos/${action.payload.photo_id}`,\n  });\n  yield put({\n    type: 'FETCH_CAPTAIN_TEAM_PHOTOS',\n    payload: action.payload.team_id\n  });       \n};\n\n// Function sends photo creation data\nfunction* createPhotosSaga(action) {\n  try{\n    yield axios({\n      method: 'POST',\n      url: '/api/photos',\n      data: action.payload\n    });\n  }\n  catch (error) {\n    if (error.response.status === 400) {\n      swal({\n        title: `You've already submitted a photo for the daily challenge today!`,\n        text: `Please try again tomorrow!`,\n        buttons: {\n        cancel: \"Ok\",\n        }\n      })\n    }\n  }\n};\n\n// Function runs a delete request with action.payload.photo_id upon success throws back into fetch_captain_team_photos with action.payload.team_id\nfunction* denyPhotosSaga(action){  \n  yield axios({\n    method: 'DELETE',\n    url: `/api/photos/${action.payload.photo_id}`,\n  });\n  yield put({\n    type: 'FETCH_CAPTAIN_TEAM_PHOTOS',\n    payload: action.payload.team_id\n  });     \n};\n\n// Function sends get request to get all challenge photos and puts in reducer listening for 'SET_CHALLENGE_PHOTOS'\nfunction* fetchChallengePhotosSaga(){    \n  let response = yield axios({\n    method: 'GET',\n    url: `/api/challengephotos`,\n  });   \n  yield put({\n    type: 'SET_CHALLENGE_PHOTOS',\n    payload: response.data\n  });\n};\n\nfunction* photosSaga() {\n  yield takeLatest('APPROVE_PHOTOS', approvePhotosSaga);\n  yield takeLatest('CREATE_PHOTOS', createPhotosSaga);\n  yield takeLatest('DELETE_PHOTOS', denyPhotosSaga);\n  yield takeLatest('FETCH_CHALLENGE_PHOTOS', fetchChallengePhotosSaga);\n};\n\nexport default photosSaga;"]},"metadata":{},"sourceType":"module"}