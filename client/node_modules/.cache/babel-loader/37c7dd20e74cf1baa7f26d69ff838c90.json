{"ast":null,"code":"import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios'; // worker Saga: will be fired on \"LOGIN\" actions\n\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({\n      type: 'CLEAR_LOGIN_ERROR'\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    }; // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n\n    yield axios.post('/api/user/login', action.payload, config); // after the user has logged in\n    // get the user information from the server\n\n    yield put({\n      type: 'FETCH_USER'\n    });\n  } catch (error) {\n    console.log('Error with user login:', error);\n\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({\n        type: 'LOGIN_FAILED'\n      });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({\n        type: 'LOGIN_FAILED_NO_CODE'\n      });\n    }\n  }\n} // worker Saga: will be fired on \"LOGOUT\" actions\n\n\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    }; // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n\n    yield axios.post('/api/user/logout', config); // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n\n    yield put({\n      type: 'UNSET_USER'\n    });\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;","map":{"version":3,"sources":["/Users/rthrcrsn/Documents/Projects/struggling-shelter/src/redux/sagas/login.saga.js"],"names":["put","takeLatest","axios","loginUser","action","type","config","headers","withCredentials","post","payload","error","console","log","response","status","logoutUser","loginSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,UAAUC,SAAV,CAAoBC,MAApB,EAA4B;AAC1B,MAAI;AACF;AACA,UAAMJ,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAT;AAEA,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OADI;AAEbC,MAAAA,eAAe,EAAE;AAFJ,KAAf,CAJE,CASF;AACA;AACA;;AACA,UAAMN,KAAK,CAACO,IAAN,CAAW,iBAAX,EAA8BL,MAAM,CAACM,OAArC,EAA8CJ,MAA9C,CAAN,CAZE,CAcF;AACA;;AACA,UAAMN,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAT;AACD,GAjBD,CAiBE,OAAOM,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,KAAtC;;AACA,QAAIA,KAAK,CAACG,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EAAmC;AACjC;AACA;AACA;AACA,YAAMf,GAAG,CAAC;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAT;AACD,KALD,MAKO;AACL;AACA;AACA,YAAML,GAAG,CAAC;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAT;AACD;AACF;AACF,C,CAED;;;AACA,UAAUW,UAAV,CAAqBZ,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAME,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OADI;AAEbC,MAAAA,eAAe,EAAE;AAFJ,KAAf,CADE,CAMF;AACA;AACA;AACA;;AACA,UAAMN,KAAK,CAACO,IAAN,CAAW,kBAAX,EAA+BH,MAA/B,CAAN,CAVE,CAYF;AACA;AACA;;AACA,UAAMN,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAT;AACD,GAhBD,CAgBE,OAAOM,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAvC;AACD;AACF;;AAED,UAAUM,SAAV,GAAsB;AACpB,QAAMhB,UAAU,CAAC,OAAD,EAAUE,SAAV,CAAhB;AACA,QAAMF,UAAU,CAAC,QAAD,EAAWe,UAAX,CAAhB;AACD;;AAED,eAAeC,SAAf","sourcesContent":["import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('/api/user/login', action.payload, config);\n\n    // after the user has logged in\n    // get the user information from the server\n    yield put({ type: 'FETCH_USER' });\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('/api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n"]},"metadata":{},"sourceType":"module"}