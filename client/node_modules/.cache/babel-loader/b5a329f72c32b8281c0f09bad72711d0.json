{"ast":null,"code":"import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects'; // worker Saga: will be fired on \"FETCH_USER\" actions\n\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    }; // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n\n    const response = yield axios.get('/api/user', config); // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n\n    console.log('res', response);\n    yield put({\n      type: 'SET_USER',\n      payload: response.data\n    });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;","map":{"version":3,"sources":["/Users/rthrcrsn/Documents/Projects/struggling-shelter/src/redux/sagas/user.saga.js"],"names":["axios","put","takeLatest","fetchUser","config","headers","withCredentials","response","get","console","log","type","payload","data","error","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC,C,CAEA;;AACA,UAAUC,SAAV,GAAsB;AACpB,MAAI;AACF,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OADI;AAEbC,MAAAA,eAAe,EAAE;AAFJ,KAAf,CADE,CAMF;AACA;AACA;AACA;;AACA,UAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,WAAV,EAAuBJ,MAAvB,CAAvB,CAVE,CAYF;AACA;AACA;;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBH,QAAnB;AAEA,UAAMN,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,OAAO,EAAEL,QAAQ,CAACM;AAAtC,KAAD,CAAT;AACD,GAlBD,CAkBE,OAAOC,KAAP,EAAc;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCI,KAAvC;AACD;AACF;;AAED,UAAUC,QAAV,GAAqB;AACnB,QAAMb,UAAU,CAAC,YAAD,EAAeC,SAAf,CAAhB;AACD;;AAED,eAAeY,QAAf","sourcesContent":["import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('/api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    console.log('res', response);\n    \n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n"]},"metadata":{},"sourceType":"module"}